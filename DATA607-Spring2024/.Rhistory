str_view(words, "(..)")
str_view(words, "(..)\\1")
str_view(words, "?(..)\\1")
str_view(words, "(..)*(..)\\1")
str_view(words, "(..)*(..)\\2")
str_view(words, "(..)*(..)")
str_view(words, "(..)*(..)\\1")
str_view(words, "(..).*\\1")
str_view(words, "(..).*\\1")
str_view(words, "(.).*\\1.*\\1")
# You can also use back references in str_replace(). For example, this code switches the order of the second and third words in sentences:
sentences |>
str_replace("(\\w+)(\\w+) (\\w+)","\\1 \\3 \\2" |>
str_view())
# You can also use back references in str_replace(). For example, this code switches the order of the second and third words in sentences:
sentences |>
str_replace("(\\w+)(\\w+)(\\w+)","\\1 \\3 \\2") |>
str_view())
# You can also use back references in str_replace(). For example, this code switches the order of the second and third words in sentences:
sentences |>
str_replace("(\\w+)(\\w+)(\\w+)","\\1 \\3 \\2") |>
str_view()
sentences |>
str_replace("(\\w+)(\\w+)(\\w+)","\\1 \\3 \\2") |>
str_view()
# You can also use back references in str_replace(). For example, this code switches the order of the second and third words in sentences:
sentences |>
str_replace("(\\w+) (\\w+) (\\w+)","\\1 \\3 \\2") |>
str_view()
# If you want to extract the matches for each group you can use str_match(). But str_match() returns a matrix, so it’s not particularly easy to work with8:
sentences |>
str_match("the (\\w+) (\\w+)") |>
head()
# You could convert to a tibble and name the columns:
sentences |>
str_match("the (\\w+) (\\w+)") |>
as_tibble() |>
set_names(c("match", "word1", "word2")) |>
head()
library(purrr)
sentences |>
str_match("the (\\w+) (\\w+)") |>
as_tibble() |>
set_names(c("match", "word1", "word2")) |>
head()
# You could convert to a tibble and name the columns:
sentences |>
str_match("the (\\w+) (\\w+)") |>
as_tibble(.name_repair = "minimal") |>
set_names(c("match", "word1", "word2")) |>
head()
sentences |>
str_match("the (\\w+) (\\w+)") |>
head()
# You could convert to a tibble and name the columns:
sentences |>
str_match("the (\\w+) (\\w+)") |>
as_tibble(.name_repair = "minimal") |>
set_names(c("match", "word1", "word2"))
# Occasionally, you’ll want to use parentheses without creating matching groups. You can create a non-capturing group with (?:)
x <- c("a gray cat", "a grey dog")
str_match(x, "gr(e|a)y")
str_match(x, "gr(?:e|a)y")
# How would you match the literal string "'\?
str_view(c("a", "a'", "a''", "a'''"), "'\\'")
# How would you match the literal string "'\?
str_view(c("a", "a'", "a'", "a'''", "Rashad"), "'\\'")
# How would you match the literal string "'\?
str_view(c("a", "a'", "a'", "a'''", "Rashad'\\"), "'\\'")
# How would you match the literal string "'\?
str_view(c("a", "a'", "a'", "a'''", "Rashad'\\"), "'\\")
# How would you match the literal string "'\?
str_view(c("a", "a'", "a'", "a'''", "Rashad'\\"), "\\'")
str_view(c("a", "a'", "a'", "a'''", "Rashad'\\"), "\\'")
# How would you match the literal string "'\?
str_view(c("a", "a'", "a'", "a'''", "Rashad'\\"), "'\\\\'")
str_view(c("a", "a'", "a'", "a'''", "Rashad'\\"), "'\\\\'")
# How would you match the literal string "'\?
str_view(c("a", "a'", "a'", "a'''", "Rashad'\\"), "'\\\'")
# How would you match the literal string "'\?
str_view(c("a", "a'", "a'", "a'''", "Rashad"), "'\\'")
# Given the corpus of common words in stingr::word, create regular expressions to match words that:
# a. Start with "y"
str_view(words, "^y")
# b. Don't start with "y"
str_view(words, "^[^y]")
# c. End with "x"
str_view(words, "x$")
# d. Are exactly three letters long
str_view(words, {3})
# d. Are exactly three letters long
str_view(words, "\\w")
# d. Are exactly three letters long
str_view(words, "\\w+")
# d. Are exactly three letters long
str_view(words, "^{3}$")
# d. Are exactly three letters long
str_view(words, "^{3}$")
str_view(words, "^{3}$")
str_view(words, "^...$")
# d. Are exactly three letters long
str_view(words, "^\w{3}$")
# d. Are exactly three letters long
str_view(words, "^\w{3}$")
# d. Are exactly three letters long
str_view(words, "^\\w{3}$")
# e. Have seven letters or more
str_view(words, "^\\w{7,}$")
str_view(words, "^.......*$")
str_view(words, "^.......+$")
# f. Contain a vowel-consonant pair
str_view(words, "[aeiou][^aeiou]")
# g. Contain at least two vowel-consonant pairs in a row.
str_view(words, "[aeiou][^aeiou][aeiou][^aeiou]")
# h. Only consist of repeated vowel-consonant pairs
str_view(words, "^(..)\\1+$")
consanants <- c("b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z")
vowels <- c("a", "e", "i", "o", "u")
# h. Only consist of repeated vowel-consonant pairs
str_view(words, "^[vowels][consanants]$")
# h. Only consist of repeated vowel-consonant pairs
str_view(words, "^(..)\\1+$")
# h. Only consist of repeated vowel-consonant pairs
str_view(words, "^[aeiou][^aeiou]{2}$")
# h. Only consist of repeated vowel-consonant pairs
str_view(words, "^(?:(?i)[aeiou][^aeiou]){2,}$")
# Create 11 regular expressions that match the British or American spellings for each of the following words:
# airplane/aeroplane
str_view(words, "a(?:ir|er)plane")
str_view(words, "a(?:ir|er)plane")
# Create 11 regular expressions that match the British or American spellings for each of the following words:
# airplane/aeroplane
str_view(words, "^\baer(?:o)?plane\b$")
# Create 11 regular expressions that match the British or American spellings for each of the following words:
# airplane/aeroplane
british_american <- c("airplane", "aeroplane")
str_view(british_american, "^\baer(?:o)?plane\b$")
str_view(british_american, "^\baer(?:o)?plane\b$")
str_view(british_american, "airplane")
str_view(british_american, "aero?plane")
# If you’re trying to match a literal ., $, |, *, +, ?, {, }, (, ), there’s an alternative to using a backslash escape: you can use a character class: [.], [$], [|], ... all match the literal values.
str_view(c("a.b","a$b","a|b"),"[|]")
str_view(british_american, "a(?:ir|ero)plane")
#aluminum/aluminium
british_american <- c("aluminum", "aluminium")
str_view(british_american, "alumin(?:um|ium)")
# analog/analogue
british_american <- c("analog", "analogue")
str_view(british_american, "analog(?:ue)?")
str_view(british_american, "analog(?:ue)")
str_view(british_american, "analog(?:ue)?")
# ass/arse
british_american <- c("ass","arse")
str_view(british_american, "a(?:ss|rse)")
str_view(british_american, "a(?:ss|rse)?")
str_view(british_american, "a(?:ss|rse)")
# center/centre
british_american <- c("center","centre")
str_view(british_american,"cent(?:er|re)")
# Create 11 regular expressions that match the British or American spellings for each of the following words:
british_american <- c("airplane", "aeroplane", "aluminum", "aluminium","analog", "analogue","ass","arse","center","centre","defense","defence","donut","doughnut", "gray","grey", "modeling","modelling","skeptic","sceptic", "summarize","summarise")
# airplane/aeroplane
str_view(british_american, "a(?:ir|ero)plane")
#aluminum/aluminium
str_view(british_american, "alumin(?:um|ium)")
# analog/analogue
str_view(british_american, "analog(?:ue)?")
# ass/arse
str_view(british_american, "a(?:ss|rse)")
# center/centre
str_view(british_american,"cent(?:er|re)")
# defense/defence
str_view(british_american,"defen(?:se|ce)")
# defense/defence
str_view(british_american,"defen(?:se|ce)")
# donut/doughnut
str_view(british_american, "do(?:ugh|)nut")
# donut/doughnut
str_view(british_american, "do(?:ugh)nut")
# donut/doughnut
str_view(british_american, "do(?:ugh|)nut")
# gray/grey
str_view(british_american,"gr(?:a|e)y")
# modeling/modelling
str_view(british_american,"model(?:l\)ing")
# modeling/modelling
str_view(british_american,"model(?:l|)ing")
# skeptic/sceptic
str_view(british_american, "s(?:k|c)eptic")
# summarize/summarise
str_view(british_american,"summari(?:se|ze")
# summarize/summarise
str_view(british_american,"summari(?:se|ze)")
# Switch the first and last letters in words. Which of those strings are still words?
words |>
str_replace("(^) ($)", "//2 //1") |>
str_view()
words |>
str_replace("(^) ($)", "//2 //1") |>
str_view()
# Switch the first and last letters in words. Which of those strings are still words?
words |>
str_replace("(^) ($)", "//1 //2") |>
str_view()
words |>
str_replace("(^) ($)", "//1 //2") |>
str_view()
# Switch the first and last letters in words. Which of those strings are still words?
words |>
paste(tail(word, 1), substring(word, 2, nchar(word) - 1), head(word, 1), sep = "") |>
str_view()
# Switch the first and last letters in words. Which of those strings are still words?
words |>
paste(tail(word, 1), substring(word, 2, nchar(word) - 1), head(word, 1), sep = "")
# Switch the first and last letters in words. Which of those strings are still words?
paste(tail(words, 1), substring(words, 2, nchar(words) - 1), head(words, 1), sep = "")
# Switch the first and last letters in words. Which of those strings are still words?
paste(tail(words, 1), substring(words, 2, nchar(words) - 1), head(words, 1), sep = " ")
# Switch the first and last letters in words. Which of those strings are still words?
paste(tail(words, 1), head(words, 1), sep = " ")
# Switch the first and last letters in words. Which of those strings are still words?
str_view(words,"(?<= )(\w)([^ ]+)(?=\w)(?: )(?!\1)(\w)([^ ]+)(\1)")
# Switch the first and last letters in words. Which of those strings are still words?
str_view(words,"(?<= )(\\w)([^ ]+)(?=\\w)(?: )(?!\\1)(\\w)([^ ]+)(\\1)")
str_view(words,"(?<= )(\\w)([^ ]+)(?=\\w)(?: )(?!\\1)(\\w)([^ ]+)(\\1)")
# Switch the first and last letters in words. Which of those strings are still words?
words |>
str_replace("([a-zA-Z])(.*)([a-zA-Z])","\\3\\2\\1") |>
head(25)
# Describe, in words, what these expressions will match:
# (.)\1\1
str_view(words,"(.)\1\1")
str_view(words,"(.)\1\1")
# "(.)(.)\\2\\1"
str_view(words,"(.)(.)\\2\\1")
# "(.)(.)\\2\\1"
str_view(words,"(.)(.)\\1\\2")
# "(.)(.)\\2\\1"
str_view(words,"(.)(.)\\2\\1")
# Describe, in words, what these expressions will match:
# (.)\1\1
str_view(words,"(.)\1\1")
# "(.)(.)\\2\\1"
str_view(words,"(.)(.)\\2\\1")
# (..)\1
str_view(words,"(..)\1")
# (..)\1
str_view(words,"(..)\1")
# "(.).\\1.\\1"
str_view(words,"(.).\\1.\\1")
# "(.)(.)(.).*\\3\\2\\1"
str_view(words,"(.)(.)(.).*\\3\\2\\1")
str_view(words, "(.)\\1\\1")
str_view(words, "(.)\\1\\1")
str_view(words, "(.)\1\1")
str_view(words, "^(.).*\\1$")
str_view(words, "(..).*\\1")
str_view(words, "(.).*\\1.*\\1")
foods <- c("bell pepper", "bilberry", "blackberry", "blood orange", "blueberry", "cantaloupe", "chili pepper", "cloudberry", "elderberry", "lime", "lychee", "mulberry", "olive", "salal berry")
foods
foods_formatted <- paste(foods, collapse = ", ")
foods_formatted
str_view(words, "(.)\1\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\1\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\1\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\1\1")
str_view(sample_words, "(.)\\1\\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
str_view("(.)(.)\\2\\1")
str_view(words,"(.)(.)\\2\\1")
majors_url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/majors-list.csv"
majors <- read.csv(majors_url)
grep(pattern = "DATA|STATISTICS", majors$Major, value = TRUE, ignore.case = TRUE)
foods <- c("bell pepper", "bilberry", "blackberry", "blood orange", "blueberry", "cantaloupe", "chili pepper", "cloudberry", "elderberry", "lime", "lychee", "mulberry", "olive", "salal berry")
foods
foods_formatted <- paste(foods, collapse = ", ")
foods_formatted
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
str_view(words,"(.)(.)\\2\\1")
# (..)\1
str_view(words,"(..)\1")
str_view(words,"(..)\1")
str_view(words,"(..)\\1")
str_view(words,"(.).\\1.\\1")
str_view(words,"(.)(.)(.).*\\3\\2\\1")
library(DBI) #
library(RMariaDB) # Dont have to neccessarily
library(dplyr)
# Parameters
user <- 'ursula.podosenin92' # Username
password <- 'ursula.podosenin92' # Password
database <- 'ursula.podosenin92'
host <- 'cunydata607sql.mysql.database.azure.com' # address of the server
port <- 3306
# Connect to the database
connection <- DBI::dbConnect(drv = MariaDB(),
dbname = database,
host = host,
port = port,
user = user,
password = password)
View(connection)
# Fetch results
tbl(connection, "movieRatings") %>% # name of table goes in the quotation
collect() -> data
# Fetch results
tbl(connection, "podosenin92") %>% # name of table goes in the quotation
collect() -> data
# Fetch results
tbl(connection, "ursula.podosenin92") %>% # name of table goes in the quotation
collect() -> data
# Fetch results
tbl(connection, "Persons") %>% # name of table goes in the quotation
collect() -> data
# Disconnect from the database
DBI::dbDisconnect(connection)
# Preview you shouldn't have to connect again
data
x <- ' [1] "bell pepper" "bilberry" "blackberry" "blood orange" [5] "blueberry" "cantaloupe" "chili pepper" "cloudberry" [9] "elderberry" "lime" "lychee" "mulberry" [13] "olive" "salal berry" '
x
plot(Ozone ~ Wind, data = airquality)
View(airquality)
?airquality
lm(change ~ setting + effort)
lm(change ~ setting + effort, data = airquality)
?lm
plot(Temp ~ Month, data = airquality)
hflights
data(hflights)
head(mtcars)
# "A data only package containing commercial domestic flights
# that departed Houston (IAH and HOU) in 2011."
library(hflights)
# dplyr is a faster subset of dataframe commands from the flyer package that also
# implements "chaining of verbs"
library(dplyr)
vignette(package="dplyr")
vignette("introduction", package="dplyr")
vignette("introduction", package="dplyr")
vignette(package="dplyr")
vignette("Introduction", package="dplyr")
# command to show the datasets that come with a specific package
(data(package="dplyr")$results)
dim(hflights)
head(hflights)
# tbl_df: wrapper function for convenience
hflights_df <- tbl_df(hflights)
# tbl_df: wrapper function for convenience
hflights_df <- tibble::as_tibble(hflights)
hflights_df
# parantheses around statement is equivalent to print command
(filter(hflights_df, Month == 9, DayofMonth == 18))
# equivalent statements using "base R"
(hflights[hflights$Month == 9 & hflights$DayOfMonth == 18,])
# equivalent statements using "base R"
(hflights[hflights$Month == 9 & hflights$DayOfMonth == 18,])
(filter(hflights_df, Month==1 | Month ==2))
# arrange() - like filter, but reorders rows instead of filtering them
arrange(hflights_df, DayofMonth, Month, Year)
arrange(hflights_df, desc(ActualElapsedTime))
# see also plyr::arrange()
# dplyr()::arrange is implemented as a wrapper around base::order()
(hflights[order(hflights$DayofMonth, hflights$Month, hflights$Year),])
(hflights[order(desc(hflights$ActualElapsedTime)),])
# select() -- selects columns - similiar to select argument in base::subset()
select(hflights_df, Year, Month, DayOfWeek, ArrDelay)
select(hflights_df, Year:DayOfWeek)
select(hflights_df, -(Year:DayOfWeek))
# mutate() - add columns
# cf plyr::mutate(), base::transform()
mutate(hflights_df,
gain = ArrDelay - DepDelay,
speed = Distance/ AirTime * 60)
# unlike transform(), mutate() lets you use columns you just created:
mutate(hflights_df,
gain= ArrDelay - DepDelay,
gain_per_hour = gain / (AirTime / 60) )
# following transform() generates an error
transform(hflights,
gain= ArrDelay - DepDelay,
gain_per_hour = gain / (AirTime / 60))
## Grouped Operations
(planes <- group_by(hflights_df, TailNum))
delay <- summarise(planes,
count=n(),
dist=mean(Distance, na.rm = TRUE),
delay=mean(ArrDelay, na.rm = TRUE))
delay
delay <- filter(delay, count > 20, dist < 2000)
delay
# Find number of planes and number of flights that go to each possible destination
(destinations <- group_by(hflights_df, Dest))
summarise(destinations,
planes= n_distinct(TailNum),
flights=n())
# grouping by multiple variables - progressively rolls up a dataset
# careful about types of numbers you roll-up; eg. avoid means, variance, ytd totals, etc.
daily <- group_by(hflights_df, Year, Month, DayofMonth)
(per_day <- summarise(daily, flights=n()))
(per_month <- summarise(per_day, flights=sum(flights)))
(per_year <- summarise(per_month, flights=sum(flights)))
# method 1: save intermediate results:  I like to start here!!
a1 <- group_by(hflights, Year, Month, DayofMonth)
a2 <- select(a1, Year:DayofMonth, ArrDelay, DepDelay)
a3 <- summarise(a2,
arr = mean(ArrDelay, na.rm=TRUE),
dep = mean(DepDelay, na.rm = TRUE))
a4 <- filter(a3, arr > 30 | dep > 30)
filter(
summarise(
select(
group_by(hflights, Year, Month, DayofMonth),
Year:DayofMonth, ArrDelay, DepDelay),
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
),
arr > 30 | dep > 30
)
# benchmark -  R coders often compare plyr, dplyr, base functions, and data.table()
# "plyr - 13 hour job -> < 1 minute in dplyr (or data.table())"
system.time(filter(
summarise(
select(
group_by(hflights, Year, Month, DayofMonth),
Year:DayofMonth, ArrDelay, DepDelay),
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
),
arr > 30 | dep > 30
))
hflights %>%
group_by(Year, Month, DayofMonth) %>%
select(Year:DayofMonth, ArrDelay, DepDelay) %>%
summarise(
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
# Read in CSV data
tidy_flights <- read.csv("tidy_flights.csv")
# Read in CSV data
tidy_flights <- read.csv("tidy_flights.csv")
setwd("C:/Users/rdlon/OneDrive/Documents/Education/CUNY School of Professional Stuides/DATA 607/DATA607-Spring2024/Assignments/Assignment Tidying and Transforming Data")
# Read in CSV data
tidy_flights <- read.csv("tidy_flights.csv")
tidy_flights
View(tidy_flights)
#Rename columns
colnames(tidy_flights) <- c("Airline", "Arrival","Los Angeles", "Phoenix","San Diego","San Francisco","Seattle")
tidy_flights
# Make tidy_flights longer
tidy_flights_long <- gather(tidy_flights, "Destination", "Count", -Airline, -Arrival)
# Make tidy_flights longer
?gather
#tidyr
library(tidyr)
# Make tidy_flights longer
tidy_flights_long <- gather(tidy_flights, "Destination", "Count", -Airline, -Arrival)
tidy_flights_long
?gather
# Make tidy_flights longer using pivot
tidy_flights_long <- pivot_longer(tidy_flights, cols = c("Los Angeles", "Phoenix","San Diego","San Francisco","Seattle"), names_to = "Destination", values_to = "Count")
tidy_flights_long
tidy_flights
#remove NA rows
tidy_flights <- na.omit(tidy_flights)
tidy_flights
VIEW(tidy_flights)
View(tidy_flights)
tidy_flights_long <- pivot_longer(tidy_flights, cols = c("Los Angeles", "Phoenix","San Diego","San Francisco","Seattle"), names_to = "Destination", values_to = "Count")
tidy_flights_long
names_to = c("On Time", "Delayed", values_to = "count")
tidy_flights_long
View(tidy_flights_long)
View(tidy_flights_long)
View(tidy_flights_long)
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c("On Time", "Delayed", values_to = "count")
tidy_flights_long
tidy_flights
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c("On Time", "Delayed"), values_to = c("On Time", "Delayed")
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c("On Time", "Delayed"), values_to = c("On Time", "Delayed"))
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c("On Time", "Delayed"), values_to = c("On Time", "Delayed"))
?names_sep
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c(".value","On Time", "Delayed"))
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c(".value","On Time")
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c(".value","On Time"))
tidy_flights
tidy_flights
# Make tidy_flights longer using pivot
tidy_flights_long <- pivot_longer(tidy_flights, cols = c("Los Angeles", "Phoenix","San Diego","San Francisco","Seattle"), names_to = "Destination", values_to = "Count")
tidy_flights_long
?fill
tidy_flights_long
#Rename columns
colnames(tidy_flights) <- c("Airline", "Arrival Type","Los Angeles", "Phoenix","San Diego","San Francisco","Seattle")
tidy_flights
# Make tidy_flights longer using pivot
tidy_flights_long <- pivot_longer(tidy_flights, cols = c("Los Angeles", "Phoenix","San Diego","San Francisco","Seattle"), names_to = "Destination", values_to = "Count")
tidy_flights_long
View(tidy_flights_long)
library(tidyverse)
