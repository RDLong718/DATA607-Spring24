"Suriname",17,163265,429,2,12,0,"Americas",
"Tanzania",131,945087,28359,45,7.02,1.9,"Africa",
"Thailand",82,513115,56293,54,8.04,1.57,"Asia",
"Togo",43,56785,3643,11,7.91,1.78,"Africa",
"UAE",9,83600,1629,6,0.83,0.69,"Asia",
"Uganda",43,235880,19517,21,10.14,1.17,"Africa",
"Vanuatu",111,12189,163,4,12,0,"Oceania",
"Venezuela",40,912050,20226,44,7.98,2.73,"Americas",
"Vietnam",88,331689,68183,40,8.8,1.59,"Asia",
"Yemen",6,527968,12302,2,0,0,"Asia",
"Zaire",219,2344858,36672,16,9.44,1.9,"Africa",
"Zambia",38,752618,8780,30,5.43,0.67,"Africa",
"Zimbabwe",18,390759,10019,52,5.29,1.43,"Africa") %>%
gather(., Measurement, Value, -Country, -Continent) %>%
select(., Continent, Country, Measurement, Value)
NULL
devtools::use_data(language_diversity, overwrite = TRUE)
View(language_diversity)
# Make dataset in wide format
language_diversity_wide <- language_diversity %>%
spread(language, count)
# What are the distinct observations in the measurements column?
distinct(language_diversity, measurements)
# What are the distinct observations in the measurement column?
distinct(language_diversity, measurement)
# What are the distinct observations in the measurement column?
distinct(language_diversity, measurement)
# What are the distinct observations in the measurement column?
language_diversity |>
distinct(measurement)
str(language_diversity)
language_diversity |>
summarise("Distinct Measurements" = distinct(Measurement))
# Hello World
print("Hello, World!")
# view structure of language_diversity dataframe
str(language_diversity)
str(language_diversity)
# view first few rows of language_diversity dataframe
head(language_diversity)
# Find the unique values of the 'Measurement' column
unique(language_diversity$Measurement)
wide_langugages <- language_diversity |>
pivot_wider(names_from = Measurement, values_from = Value)
View(wide_langugages)
View(wide_langugages)
str(wide_langugages)
# Change names of specific columns
wide_languages <- wide_languages |>
rename(
"Languages" == "Langs",
"Weather Stations" == "Stations",
"Mean Growing Season" == "MGS"
"Deviation Growing Season" == "Std"
# Change names of specific columns
wide_languages <- wide_languages |>
rename(
"Languages" == "Langs",
"Weather Stations" == "Stations",
"Mean Growing Season" == "MGS",
"Deviation Growing Season" == "Std"
)
# delete dataset
rm(wide_langugages)
rm(wide_langugages)
# view structure of language_diversity dataframe
str(language_diversity)
# view first few rows of language_diversity dataframe
head(language_diversity)
# Find the unique values of the 'Measurement' column
unique(language_diversity$Measurement)
wide_languages <- language_diversity |>
pivot_wider(names_from = Measurement, values_from = Value)
str(wide_languages)
# Change names of specific columns
wide_languages <- wide_languages |>
rename(
"Languages" == "Langs",
"Weather Stations" == "Stations",
"Mean Growing Season" == "MGS",
"Deviation Growing Season" == "Std"
)
View(tidy_flights_long)
View(wide_languages)
# Change names of specific columns
wide_languages <- wide_languages |>
rename(
"Weather Stations" == "Stations",
"Mean Growing Season" == "MGS",
"Deviation Growing Season" == "Std"
)
# Change names of specific columns
wide_languages <- wide_languages |>
rename(
"Langs" == "Languages",
"Stations" == "Weather Stations",
"MGS" == "Mean Growing Season",
"Std" == "Deviation Growing Season"
)
# rename some columns
wide_kanguages <- wide_languages |>
rename(
language = `Language or language family`,
diversity = `Language diversity index`
)
str(wide_languages)
wide_languages <- wide_languages |>
rename(
"Languages" = "Langs"
)
str(wide_languages)
# Change names of specific columns
wide_languages <- wide_languages |>
rename(
"Languages" = "Langs",
"Weather Stations" = "Stations",
"Mean Growth" = "MGS",
"Growth Deviation" = "Std"
)
wide_languages <- language_diversity |>
pivot_wider(names_from = Measurement, values_from = Value)
# Change names of specific columns
wide_languages <- wide_languages |>
rename(
"Languages" = "Langs",
"Weather Stations" = "Stations",
"Mean Growth" = "MGS",
"Growth Deviation" = "Std"
)
str(wide_languages)
# Does the area size of the country affect language diversity?
wide_languages |>
ggplot(aes(x = Area, y = Languages)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Language Diversity vs. Country Area",
x = "Country Area (sq. km)",
y = "Number of Languages") +
theme_minimal()
str(wide_languages)
install.packages("devtools")
devtools::install_github("jvcasillas/untidydata")
# view structure of language_diversity dataframe
str(language_diversity)
library(untidydata)
data(spanish_vowels)
str(language_diversity)
head(language_diversity)
str(language_diversity)
head(language_diversity)
install.packages("devtools")
devtools::install_github("jvcasillas/untidydata")
# Remove language diversity
rm(language_diversity)
# view structure of language_diversity dataframe
str(language_diversity)
install.packages("devtools")
devtools::install_github("jvcasillas/untidydata")
install.packages("devtools")
# view structure of language_diversity dataframe
str(language_diversity)
data(language_diversity))
data(language_diversity)
install.packages("devtools")
devtools::install_github("jvcasillas/untidydata", force=TRUE)
data(language_diversity)
library(untidydata)
data(language_diversity)
View(a1)
View(language_diversity)
unique(language_diversity$Measurement)
wide_languages <- language_diversity |>
pivot_wider(names_from = Measurement, values_from = Value)
library(tidyverse)
#| warning: FALSE
#| message: FALSE
library(untidydata)
library(tidyverse)
library(untidydata)
# Load the dataset
data(language_diversity)
str(language_diversity)
head(language_diversity)
# Spread the data out using the pivot_wider function
wide_languages <- language_diversity |>
pivot_wider(names_from = Measurement, values_from = Value)
# Change names of specific columns
wide_languages <- wide_languages |>
rename(
"Languages" = "Langs",
"Weather Stations" = "Stations",
"Mean Growth" = "MGS",
"Growth Deviation" = "Std"
)
str(wide_languages)
head(wide_languages)
pivoted_data <- pivot_wider(language_diversity, names_from = Measurement, values_from = Value)
pivoted_data$Avg_Langs_Per_Person <- pivoted_data$Langs / pivoted_data$Population
print(pivoted_data)
Based on the analysis of the dataset, the countries with the highest amount of languages per capita are Vanuatu, Papua New Guinea, French Guiana, Suriname and Gabon. The table above has been sorted by average amount of languages column which gives us this value.
Based on the analysis of the dataset, the countries with the highest amount of languages per capita are Vanuatu, Papua New Guinea, French Guiana, Suriname and Gabon. The table above has been sorted by average amount of languages column which gives us this value.
### Conclusion
Based on the analysis of the dataset, the countries with the highest amount of languages per capita are Vanuatu, Papua New Guinea, French Guiana, Suriname and Gabon. The table above has been sorted by average amount of languages column which gives us this value.
head(sorted_data)
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
head(sorted_data)
top_10 <- head(sorted_data, 10)
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
top_10 <- head(sorted_data, 10)
ggplot(top_10, aes(x = Country, y = Avg_Langs_Per_Person)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Top 10 Countries with the Highest Average Languages per Capita",
x = "Country",
y = "Average Languages per Capita"
ggplot(top_10, aes(x = Country, y = Avg_Langs_Per_Person)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Top 10 Countries with the Highest Average Languages per Capita",
x = "Country",
y = "Average Languages per Capita")
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
top_10 <- head(sorted_data, 10)
ggplot(top_10, aes(x = Country, y = Avg_Langs_Per_Person)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Top 10 Countries with the Highest Average Languages per Capita",
x = "Country",
y = "Average Languages per Capita")
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
top_10 <- head(sorted_data, 10)
ggplot(top_10, aes(x = Country, y = Avg_Langs_Per_Person)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 45, hjust = .5)) +
labs(title = "Top 10 Countries with the Highest Average Languages per Capita",
x = "Country",
y = "Average Languages per Capita")
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
top_10 <- head(sorted_data, 10)
ggplot(top_10, aes(x = Country, y = Avg_Langs_Per_Person)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Top 10 Countries with the Highest Average Languages per Capita",
x = "Country",
y = "Average Languages per Capita")
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
top_10 <- head(sorted_data, 10)
ggplot(top_10, aes(reorder(x = Country,Avg_Langs_Per_Person) y = Avg_Langs_Per_Person)) +
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
top_10 <- head(sorted_data, 10)
ggplot(top_10, aes(reorder(x = Country,Avg_Langs_Per_Person)) y = Avg_Langs_Per_Person)) +
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
top_10 <- head(sorted_data, 10)
ggplot(top_10, aes(reorder(x = Country,Avg_Langs_Per_Person), y = Avg_Langs_Per_Person)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Top 10 Countries with the Highest Average Languages per Capita",
x = "Country",
y = "Average Languages per Capita")
# | warning: FALSE
sorted_data <- pivoted_data[order(-pivoted_data$Avg_Langs_Per_Person), ]
top_10 <- head(sorted_data, 10)
ggplot(top_10, aes(reorder(x = Country,Avg_Langs_Per_Person), y = Avg_Langs_Per_Person)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Top 10 Countries with the Highest Average Languages per Capita",
x = "Country",
y = "Average Languages per Capita")
setwd("~/Education/CUNY School of Professional Stuides/DATA 607/DATA607-Spring2024/Assignments/Working with XML and JSON on R")
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
# Read HTML table using rvest
df_html <- rvest::read_html("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.html") %>%
rvest::html_nodes("table") %>%
rvest::html_table(fill = TRUE)
# Read XML data using xml2
df_xml <- xml2::read_xml("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xpath("//book") %>%
xml2::xml_to_data.frame()
# Read HTML table using rvest
df_html <- rvest::read_html("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.html") %>%
rvest::html_nodes("table") %>%
rvest::html_table(fill = TRUE)
# Read XML data using xml2
# df_xml <- xml2::read_xml("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
#   xml2::xpath("//book") %>%
#   xml2::xml_to_data.frame()
View(df_html)
# Read XML file using xml2
df_xml <- xml2::read_xml("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xml_find_all(".//row") %>%
xml2::xml_text()
# Read XML file using xml2
# Read the XML file
doc <- xml2::read_xml("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml")
# Read XML file using xml2
url <- "https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml"
# Read XML into dataframe
df_xml <- read_xml(x = url)
# Read XML file using xml2
url <- "https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml"
# Read XML into dataframe
df_xml <- read_xml(x = url)
# Read XML file using xml2
url <- readLines("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml", encoding = "UTF-8")
# Read XML into dataframe
df_xml <- xmlTreeParse(url, useInternalNodes = TRUE)
library(xmlparsedata)
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
library(xmlparsedata) # for working with XML
# Read XML file using xml2
url <- readLines("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml", encoding = "UTF-8")
# Read XML into dataframe
df_xml <- xmlTreeParse(url, useInternalNodes = TRUE)
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
library(xmlparsedata) # for working with XML
# Read XML file using xml2
url <- readLines("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml", encoding = "UTF-8")
# Read XML into dataframe
df_xml <- xmlTreeParse(url, useInternalNodes = TRUE)
# Read XML file using xml2
url <- readLines("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml", encoding = "UTF-8")
# Read XML into dataframe
df_xml = xmlTreeParse(url, useInternalNodes = TRUE)
install.packages("XMLParser")
library(XMLParser)
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
pg <- read_xml("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml")
pg <- read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml")
# get all the <record>s
recs <- xml_find_all(pg, "//record")
# extract and clean all the columns
vals <- trimws(xml_text(recs))
# extract and clean (if needed) the area names
labs <- trimws(xml_attr(recs, "label"))
# mine the column names from the two variable descriptions
# this XPath construct lets us grab either the <categ…> or <real…> tags
# and then grabs the 'name' attribute of them
cols <- xml_attr(xml_find_all(pg, "//data/variables/*[self::categoricalvariable or
self::realvariable]"), "name")
# this converts each set of <record> columns to a data frame
# after first converting each row to numeric and assigning
# names to each column (making it easier to do the matrix to data frame conv)
dat <- do.call(rbind, lapply(strsplit(vals, "\ +"),
function(x) {
data.frame(rbind(setNames(as.numeric(x),cols)))
}))
# Read XML file using xml2
df_xml <- xml2::read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xml_find_all("//book") %>%
xml2::xml_text()
# Read XML file using xml2
df_xml <- xml2::read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xml_find_all("//book") %>%
xml2::xml_text()
str(df_xml)
# Read XML file using xml2
xml_url <- "https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml"
df_xml <- xml2::read_xml(xml_url)
str(df_xml)
View(df_xml)
# Read XML file using xml2
xml_url <- "https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml"
response <- httr::GET(xml_url)
xml_content <- httr::content(response, as = "text")
xml_parsed <- xml2::read_xml(xml_content)
df_xml <- xml2::as_list(xml_parsed)
View(df_xml)
# Read JSON file using `jsonlite` package
json_url <- "https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.json"
df_json <- jsonlite::fromJSON(json_url)
View(df_json)
View(df_json[[2]][[1]])
# Read XML file using `xml2` and `httr` packages
df_xml <- xml2::read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xpath("//book") %>%
xml2::xml_to_data.frame()
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
library(httr) # for working with HTTP
# Read XML file using `xml2` and `httr` packages
df_xml <- xml2::read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xpath("//book") %>%
xml2::xml_to_data.frame()
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
library(httr) # for working with HTTP
library(tidyverse)
xml_address = "http://www.fehd.gov.hk/english/licensing/license/text/LP_Restaurants_EN.XML"
restaurant_license_xml = as_list(read_xml(xml_address))
xml_df = tibble::as_tibble(restaurant_license_xml) %>%
unnest_longer(DATA)
View(restaurant_license_xml)
View(xml_df)
df_xml <- xml2::read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xpath("//books") %>%
xml2::xml_to_data.frame()
df_xml <- xml2::read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xpath("//books") %>%
xml_to_data.frame()
df_xml <- xml2::read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xpath("//books") %>%
xml2::xml_to_df()
df_xml <- xml2::read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml") %>%
xml2::xpath("//books") %>%
xml_to_df()
install.packages("xml2")
install.packages("XML")
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
library(httr) # for working with HTTP
library(tidyverse)
library(XML)
install.packages("XML")
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
library(httr) # for working with HTTP
library(tidyverse)
library(XML)
df_xml <- read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml")
df_xml
View(df_xml)
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
library(httr) # for working with HTTP
library(tidyverse)
library(XML)
# Read JSON file using `jsonlite` package
# Then we have to load JSON data
json_data <- fromJSON("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.json")
# Then convert  the JSON data to dataframe
df_json <- as.data.frame(json_data)
# At last print the output dataframe
print(df_json)
# Read JSON file using `jsonlite` package
# Then we have to load JSON data
json_data <- fromJSON("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.json")
# Then convert  the JSON data to dataframe
df_json <- as.data.frame(json_data)
# At last print the output dataframe
print(df_json)
# Read JSON file using `jsonlite` package
# Then we have to load JSON data
json_data <- fromJSON("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.json")
# Then convert  the JSON data to dataframe
df_json <- as.data.frame(json_data)
# At last print the output dataframe
print(df_json)
View(df_json)
View(df_json[[1]][[1]])
# Read JSON file using `jsonlite` package
# Then we have to load JSON data
json_data <- fromJSON("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.json")
# Then convert  the JSON data to dataframe
df_json <- as.data.frame(json_data)
# At last print the output dataframe
print(df_json)
# Read JSON file using `jsonlite` package
# Then we have to load JSON data
json_data <- fromJSON("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.json")
# Then convert  the JSON data to dataframe
df_json <- as.data.frame(json_data)
# At last print the output dataframe
print(df_json)
df_xml <- read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml")
print(df_xml)
# Read HTML table using rvest
df_html <- rvest::read_html("https://github.com/RDLong718/DATA607-Spring24/blob/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.html") %>%
rvest::html_nodes("table") %>%
rvest::html_table(fill = TRUE)
print(df_html)
#| warning: FALSE
library(rvest) # for working with HTML
library(xml2) # for working with XML
library(jsonlite) # for working with JSON
library(httr) # for working with HTTP
library(tidyverse)
library(XML)
# Read HTML table using rvest
df_html <- rvest::read_html("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.html") %>%
rvest::html_nodes("table") %>%
rvest::html_table(fill = TRUE)
print(df_html)
df_xml <- read_xml("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.xml")
print(df_xml)
# Read JSON file using `jsonlite` package
# Then we have to load JSON data
json_data <- fromJSON("https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Working%20with%20XML%20and%20JSON%20on%20R/Working%20with%20XML%20and%20JSON%20in%20R.json")
# Then convert  the JSON data to dataframe
df_json <- as.data.frame(json_data)
# At last print the output dataframe
print(df_json)
