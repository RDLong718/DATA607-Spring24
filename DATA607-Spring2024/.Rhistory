# "(.)(.)(.).*\\3\\2\\1"
str_view(words,"(.)(.)(.).*\\3\\2\\1")
str_view(words, "(.)\\1\\1")
str_view(words, "(.)\\1\\1")
str_view(words, "(.)\1\1")
str_view(words, "^(.).*\\1$")
str_view(words, "(..).*\\1")
str_view(words, "(.).*\\1.*\\1")
foods <- c("bell pepper", "bilberry", "blackberry", "blood orange", "blueberry", "cantaloupe", "chili pepper", "cloudberry", "elderberry", "lime", "lychee", "mulberry", "olive", "salal berry")
foods
foods_formatted <- paste(foods, collapse = ", ")
foods_formatted
str_view(words, "(.)\1\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\1\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\1\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\1\1")
str_view(sample_words, "(.)\\1\\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
str_view("(.)(.)\\2\\1")
str_view(words,"(.)(.)\\2\\1")
majors_url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/majors-list.csv"
majors <- read.csv(majors_url)
grep(pattern = "DATA|STATISTICS", majors$Major, value = TRUE, ignore.case = TRUE)
foods <- c("bell pepper", "bilberry", "blackberry", "blood orange", "blueberry", "cantaloupe", "chili pepper", "cloudberry", "elderberry", "lime", "lychee", "mulberry", "olive", "salal berry")
foods
foods_formatted <- paste(foods, collapse = ", ")
foods_formatted
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")
str_view(words,"(.)(.)\\2\\1")
# (..)\1
str_view(words,"(..)\1")
str_view(words,"(..)\1")
str_view(words,"(..)\\1")
str_view(words,"(.).\\1.\\1")
str_view(words,"(.)(.)(.).*\\3\\2\\1")
library(DBI) #
library(RMariaDB) # Dont have to neccessarily
library(dplyr)
# Parameters
user <- 'ursula.podosenin92' # Username
password <- 'ursula.podosenin92' # Password
database <- 'ursula.podosenin92'
host <- 'cunydata607sql.mysql.database.azure.com' # address of the server
port <- 3306
# Connect to the database
connection <- DBI::dbConnect(drv = MariaDB(),
dbname = database,
host = host,
port = port,
user = user,
password = password)
View(connection)
# Fetch results
tbl(connection, "movieRatings") %>% # name of table goes in the quotation
collect() -> data
# Fetch results
tbl(connection, "podosenin92") %>% # name of table goes in the quotation
collect() -> data
# Fetch results
tbl(connection, "ursula.podosenin92") %>% # name of table goes in the quotation
collect() -> data
# Fetch results
tbl(connection, "Persons") %>% # name of table goes in the quotation
collect() -> data
# Disconnect from the database
DBI::dbDisconnect(connection)
# Preview you shouldn't have to connect again
data
x <- ' [1] "bell pepper" "bilberry" "blackberry" "blood orange" [5] "blueberry" "cantaloupe" "chili pepper" "cloudberry" [9] "elderberry" "lime" "lychee" "mulberry" [13] "olive" "salal berry" '
x
plot(Ozone ~ Wind, data = airquality)
View(airquality)
?airquality
lm(change ~ setting + effort)
lm(change ~ setting + effort, data = airquality)
?lm
plot(Temp ~ Month, data = airquality)
hflights
data(hflights)
head(mtcars)
# "A data only package containing commercial domestic flights
# that departed Houston (IAH and HOU) in 2011."
library(hflights)
# dplyr is a faster subset of dataframe commands from the flyer package that also
# implements "chaining of verbs"
library(dplyr)
vignette(package="dplyr")
vignette("introduction", package="dplyr")
vignette("introduction", package="dplyr")
vignette(package="dplyr")
vignette("Introduction", package="dplyr")
# command to show the datasets that come with a specific package
(data(package="dplyr")$results)
dim(hflights)
head(hflights)
# tbl_df: wrapper function for convenience
hflights_df <- tbl_df(hflights)
# tbl_df: wrapper function for convenience
hflights_df <- tibble::as_tibble(hflights)
hflights_df
# parantheses around statement is equivalent to print command
(filter(hflights_df, Month == 9, DayofMonth == 18))
# equivalent statements using "base R"
(hflights[hflights$Month == 9 & hflights$DayOfMonth == 18,])
# equivalent statements using "base R"
(hflights[hflights$Month == 9 & hflights$DayOfMonth == 18,])
(filter(hflights_df, Month==1 | Month ==2))
# arrange() - like filter, but reorders rows instead of filtering them
arrange(hflights_df, DayofMonth, Month, Year)
arrange(hflights_df, desc(ActualElapsedTime))
# see also plyr::arrange()
# dplyr()::arrange is implemented as a wrapper around base::order()
(hflights[order(hflights$DayofMonth, hflights$Month, hflights$Year),])
(hflights[order(desc(hflights$ActualElapsedTime)),])
# select() -- selects columns - similiar to select argument in base::subset()
select(hflights_df, Year, Month, DayOfWeek, ArrDelay)
select(hflights_df, Year:DayOfWeek)
select(hflights_df, -(Year:DayOfWeek))
# mutate() - add columns
# cf plyr::mutate(), base::transform()
mutate(hflights_df,
gain = ArrDelay - DepDelay,
speed = Distance/ AirTime * 60)
# unlike transform(), mutate() lets you use columns you just created:
mutate(hflights_df,
gain= ArrDelay - DepDelay,
gain_per_hour = gain / (AirTime / 60) )
# following transform() generates an error
transform(hflights,
gain= ArrDelay - DepDelay,
gain_per_hour = gain / (AirTime / 60))
## Grouped Operations
(planes <- group_by(hflights_df, TailNum))
delay <- summarise(planes,
count=n(),
dist=mean(Distance, na.rm = TRUE),
delay=mean(ArrDelay, na.rm = TRUE))
delay
delay <- filter(delay, count > 20, dist < 2000)
delay
# Find number of planes and number of flights that go to each possible destination
(destinations <- group_by(hflights_df, Dest))
summarise(destinations,
planes= n_distinct(TailNum),
flights=n())
# grouping by multiple variables - progressively rolls up a dataset
# careful about types of numbers you roll-up; eg. avoid means, variance, ytd totals, etc.
daily <- group_by(hflights_df, Year, Month, DayofMonth)
(per_day <- summarise(daily, flights=n()))
(per_month <- summarise(per_day, flights=sum(flights)))
(per_year <- summarise(per_month, flights=sum(flights)))
# method 1: save intermediate results:  I like to start here!!
a1 <- group_by(hflights, Year, Month, DayofMonth)
a2 <- select(a1, Year:DayofMonth, ArrDelay, DepDelay)
a3 <- summarise(a2,
arr = mean(ArrDelay, na.rm=TRUE),
dep = mean(DepDelay, na.rm = TRUE))
a4 <- filter(a3, arr > 30 | dep > 30)
filter(
summarise(
select(
group_by(hflights, Year, Month, DayofMonth),
Year:DayofMonth, ArrDelay, DepDelay),
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
),
arr > 30 | dep > 30
)
# benchmark -  R coders often compare plyr, dplyr, base functions, and data.table()
# "plyr - 13 hour job -> < 1 minute in dplyr (or data.table())"
system.time(filter(
summarise(
select(
group_by(hflights, Year, Month, DayofMonth),
Year:DayofMonth, ArrDelay, DepDelay),
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
),
arr > 30 | dep > 30
))
hflights %>%
group_by(Year, Month, DayofMonth) %>%
select(Year:DayofMonth, ArrDelay, DepDelay) %>%
summarise(
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
# Read in CSV data
tidy_flights <- read.csv("tidy_flights.csv")
# Read in CSV data
tidy_flights <- read.csv("tidy_flights.csv")
setwd("C:/Users/rdlon/OneDrive/Documents/Education/CUNY School of Professional Stuides/DATA 607/DATA607-Spring2024/Assignments/Assignment Tidying and Transforming Data")
# Read in CSV data
tidy_flights <- read.csv("tidy_flights.csv")
tidy_flights
View(tidy_flights)
#Rename columns
colnames(tidy_flights) <- c("Airline", "Arrival","Los Angeles", "Phoenix","San Diego","San Francisco","Seattle")
tidy_flights
# Make tidy_flights longer
tidy_flights_long <- gather(tidy_flights, "Destination", "Count", -Airline, -Arrival)
# Make tidy_flights longer
?gather
#tidyr
library(tidyr)
# Make tidy_flights longer
tidy_flights_long <- gather(tidy_flights, "Destination", "Count", -Airline, -Arrival)
tidy_flights_long
?gather
# Make tidy_flights longer using pivot
tidy_flights_long <- pivot_longer(tidy_flights, cols = c("Los Angeles", "Phoenix","San Diego","San Francisco","Seattle"), names_to = "Destination", values_to = "Count")
tidy_flights_long
tidy_flights
#remove NA rows
tidy_flights <- na.omit(tidy_flights)
tidy_flights
VIEW(tidy_flights)
View(tidy_flights)
tidy_flights_long <- pivot_longer(tidy_flights, cols = c("Los Angeles", "Phoenix","San Diego","San Francisco","Seattle"), names_to = "Destination", values_to = "Count")
tidy_flights_long
names_to = c("On Time", "Delayed", values_to = "count")
tidy_flights_long
View(tidy_flights_long)
View(tidy_flights_long)
View(tidy_flights_long)
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c("On Time", "Delayed", values_to = "count")
tidy_flights_long
tidy_flights
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c("On Time", "Delayed"), values_to = c("On Time", "Delayed")
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c("On Time", "Delayed"), values_to = c("On Time", "Delayed"))
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c("On Time", "Delayed"), values_to = c("On Time", "Delayed"))
?names_sep
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c(".value","On Time", "Delayed"))
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c(".value","On Time")
tidy_flights_long <- pivot_longer(tidy_flights, cols = "Arrival", names_to = c(".value","On Time"))
tidy_flights
tidy_flights
# Make tidy_flights longer using pivot
tidy_flights_long <- pivot_longer(tidy_flights, cols = c("Los Angeles", "Phoenix","San Diego","San Francisco","Seattle"), names_to = "Destination", values_to = "Count")
tidy_flights_long
?fill
tidy_flights_long
#Rename columns
colnames(tidy_flights) <- c("Airline", "Arrival Type","Los Angeles", "Phoenix","San Diego","San Francisco","Seattle")
tidy_flights
# Make tidy_flights longer using pivot
tidy_flights_long <- pivot_longer(tidy_flights, cols = c("Los Angeles", "Phoenix","San Diego","San Francisco","Seattle"), names_to = "Destination", values_to = "Count")
tidy_flights_long
View(tidy_flights_long)
library(tidyverse)
# What is the sum of total flights to each destination?
my_flights |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Total Flights by Destination", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
library(tidyverse)
# What is the sum of total flights to each destination?
my_flights |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Total Flights by Destination", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
# Read in CSV file
my_flights <-
read.csv(
"https://raw.githubusercontent.com/RDLong718/DATA607-Spring24/main/DATA607-Spring2024/Assignments/Assignment%20Tidying%20and%20Transforming%20Data/tidy_flights.csv"
)
# Remove null row
my_flights <- na.omit(my_flights)
# Clean up Column names then transform data to long format then insert NA in preparation for using the fill down function
my_flights <- my_flights |> # Rename columns
rename(
"Airline" = "X",
"Arrival" = "X.1",
"Los Angeles" = "Los.Angeles",
"San Diego" = "San.Diego",
"San Francisco" = "San.Francisco"
) |> # Pivot data to long format
pivot_longer(
cols = -c("Airline", "Arrival"),
names_to = "Destination",
values_to = "Count"
) |> # Insert NA for the blank values in the Airline column
mutate(Airline = ifelse(Airline == "", NA, Airline)) |> # Fill in the down direction
fill(Airline)
# Filter the Delayed flights then group by Airline then summarize the flights by summing the amount of each Airline. Build a bar plot to display the results
my_flights |>
filter(Arrival == "delayed") |>
group_by(Airline) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = Airline, y = Flights)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Delayed Flights by Airline", x = "Airline", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
#| layout-ncol: 2
my_flights |>
filter(Arrival == "delayed" , Airline == "AM WEST") |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Delayed Flights by Destination for AM WEST", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
my_flights |>
filter(Arrival == "delayed" , Airline == "ALASKA") |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Delayed Flights by Destination for ALASKA", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
# What is the sum of total flights to each destination?
my_flights |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Total Flights by Destination", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
# What is the sum of total flights to each destination for AM west?
my_flights |>
filter(Airline == "AM WEST") |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Total Flights by Destination", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Airline == "ALASKA") |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Total Flights by Destination", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Airline == "ALASKA") |>
group_by(Destination) |>
summarise(Flights = mean(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "green") +
labs(title = "Total Flights by Destination", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Airline == "ALASKA")
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Airline == "ALASKA", Arrival == "delayed")
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Airline == "ALASKA", Arrival == "delayed") |>
summarise(median(Count))
(62+12+20+102+305)/5
summary(my_flights)
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Arrival == "delayed") |>
by(Airline,summary)
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Arrival == "delayed") |>
by(Airline, Destination)
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Arrival == "delayed") |>
by(Airline, Destination, summary)
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Arrival == "delayed") |>
by(my_flights$Airline, summary)
# Whats the median number of delayed flights for each destination for ALASKA?
my_flights |>
filter(Arrival == "delayed") |>
by(my_flights, my_flights$Airline, summary)
# Whats the median number of delayed flights for each destination for ALASKA?
by(my_flights,my_flights$Airline,summary)
delayed_flights <- my_flights |>
filter(Arrival =="delayed")
delayed_flights
delayed_flights <- my_flights |>
filter(Arrival =="delayed") |>
group_by (Airline)
delayed_flights
delayed_flights <- my_flights |>
filter(Arrival =="delayed")
delayed_flights
by(delayed_flights,dat$Airline,summary)
by(delayed_flights,delayed_flights$Airline,summary)
library(psych)
describ.by(delayed_flights,group=delayed_flights$Airline,mat=TRUE))
describ.by(delayed_flights,group=delayed_flights$Airline,mat=TRUE)
describe.by(delayed_flights,group=delayed_flights$Airline,mat=TRUE)
delayed_flights <- my_flights |>
filter(Arrival =="delayed")
by(delayed_flights,delayed_flights$Airline,summary)
describe.by(delayed_flights$Count,group=delayed_flights$Airline,mat=TRUE)
describeBy(delayed_flights,group=delayed_flights$Airline,mat=TRUE)
describeBy(delayed_flights$Count,group=delayed_flights$Airline,mat=TRUE)
# make summary into a nice table
tibble(
Airline = c("ALASKA", "AM WEST"),
Mean = c(3.5, 4.5),
Median = c(3, 4),
Min = c(1, 2),
Max = c(6, 7),
SD = c(1.87, 2.38)
) |> kable()
describeBy(delayed_flights$Count,group=delayed_flights$Airline,mat=TRUE)
delayed_flights_summary <- describeBy(delayed_flights$Count,group=delayed_flights$Airline,mat=TRUE)
delayed_flights_summary
View(delayed_flights_summary)
#remove first column
delayed_flights_summary <- delayed_flights_summary[,-1]
delayed_flights_summary
colnames(delayed_flights_summary[1]) <- "Airline"
delayed_flights_summary
colnames(delayed_flights_summary)[1] <- "Airline"
delayed_flights_summary
View(delayed_flights_summary)
?describeBY
?describeBy
??describeBy
?psych
# Summary of Descriptive statistics for the delayed flights grouped by Airline
delayed_flights <- my_flights |>
filter(Arrival =="delayed")
delayed_flights_summary <- describeBy(delayed_flights$Count,group=delayed_flights$Airline,mat=TRUE)
delayed_flights_summary <- delayed_flights_summary[,-1]
delayed_flights_summary
colnames(delayed_flights_summary)[1] <- "Airline"
delayed_flights_summary
# Summary of Descriptive statistics for the delayed flights grouped by Airline
delayed_flights <- my_flights |>
filter(Arrival =="delayed")
delayed_flights_summary <- describeBy(delayed_flights$Count,group=delayed_flights$Airline,mat=TRUE)
delayed_flights_summary <- delayed_flights_summary[,-1]
colnames(delayed_flights_summary)[1] <- "Airline"
delayed_flights_summary
#| layout-ncol: 2
my_flights |>
filter(Arrival == "delayed" , Airline == "AM WEST") |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Delayed Flights by Destination for AM WEST", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
my_flights |>
filter(Arrival == "delayed" , Airline == "ALASKA") |>
group_by(Destination) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Destination, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Delayed Flights by Destination for ALASKA", x = "Destination", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
# Filter the Delayed flights then group by Airline then summarize the flights by summing the amount of each Airline. Build a bar plot to display the results
my_flights |>
filter(Arrival == "delayed") |>
group_by(Airline) |>
summarise(Flights = sum(Count)) |>
arrange(desc(Flights)) |>
ggplot(aes(x = reorder(Airline, -Flights), y = Flights)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Delayed Flights by Airline", x = "Airline", y = "Number of Flights") +
geom_text(aes(label = Flights), vjust = -.3)
as_tibble(delayed_flights_summary)
# Summary of Descriptive statistics for the delayed flights grouped by Airline
delayed_flights <- my_flights |>
filter(Arrival =="delayed")
delayed_flights_summary <- describeBy(delayed_flights$Count,group=delayed_flights$Airline,mat=TRUE)
delayed_flights_summary <- delayed_flights_summary[,-1]
colnames(delayed_flights_summary)[1] <- "Airline"
as_tibble(delayed_flights_summary)
# Remove null row
my_flights <- na.omit(my_flights)
myflights
# Remove null row
my_flights <- na.omit(my_flights)
my_flights
delayed_flights_summary
