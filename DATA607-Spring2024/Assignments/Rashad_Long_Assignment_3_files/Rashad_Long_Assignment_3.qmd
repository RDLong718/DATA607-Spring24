---
title: "Manipulation and Data Processing"
author: "Rashad Long"
format: html
editor: visual
---


```{r library}
library(stringr)
```
## 1. Using the 173 majors listed in fivethirtyeight.com’s College Majors dataset \[<https://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/>\]

```{r load_data}
majors_url <- "https://raw.githubusercontent.com/fivethirtyeight/data/master/college-majors/majors-list.csv"
majors <- read.csv(majors_url)
```

Provide code that identifies the majors that contain either "DATA" or "STATISTICS"

```{r search_majors}
grep(pattern = "DATA|STATISTICS", majors$Major, value = TRUE, ignore.case = TRUE)

```

## 2. Write code that transforms the data below:

\[1\] "bell pepper" "bilberry"     "blackberry"   "blood orange"

\[5\] "blueberry"    "cantaloupe"   "chili pepper" "cloudberry"  

\[9\] "elderberry"   "lime"         "lychee"       "mulberry"    

\[13\] "olive"        "salal berry"

```{r foods}
foods <- c("bell pepper", "bilberry", "blackberry", "blood orange", "blueberry", "cantaloupe", "chili pepper", "cloudberry", "elderberry", "lime", "lychee", "mulberry", "olive", "salal berry")
foods
```

Into a format like this:

c("bell pepper", "bilberry", "blackberry", "blood orange", "blueberry", "cantaloupe", "chili pepper", "cloudberry", "elderberry", "lime", "lychee", "mulberry", "olive", "salal berry")

```{r foods_formatted}
foods_formatted <- paste(foods, collapse = ", ")
foods_formatted
```

## 3. Describe, in words, what these expressions will match:

-   (.)\\1\\1
    -   This is a regular expression that matches a character that is repeated 3 times in a row

```{r expressions}
sample_words <- c("aaa","bbb","xyz","bba", "cctv","brrr")
str_view(sample_words, "(.)\\1\\1")

```

-   "(.)(.)\\\\2\\\\1"
    -   This is a string that defines a regular expression that matches 2 different characters followed by the same characters in reverse.

```{r expresions2}
str_view(words,"(.)(.)\\2\\1")
```

-   (..)\\1
    -   This is a regular expression that matches 2 characters that are repeated consecutively.

```{r expressions3}
str_view(words,"(..)\\1")
```

-   "(.).\\\\1.\\\\1"
    -   This is a string that defines a regular expression that matches a character, that repeats after the next character then repeats again after the next character.

```{r expressions4}
str_view(words,"(.).\\1.\\1")

```

-   "(.)(.)(.).\*\\\\3\\\\2\\\\1"
    -   This is a string that defines a regular expression that matches any 3 characters and then third character, second character and first character again

```{r expressions5}
str_view(words,"(.)(.)(.).*\\3\\2\\1")
```

## 4. Construct regular expressions to match words that:

-   Start and end with the same character.

```{r start_end_same_character}
str_view(words, "^(.).*\\1$")

```

-   Contain a repeated pair of letters (e.g. "church" contains "ch" repeated twice.)

```{r repeated_pair}
str_view(words, "(..).*\\1")


```

-   Contain one letter repeated in at least three places (e.g. "eleven" contains three "e"s.)

```{r repeated_letter}
str_view(words, "(.).*\\1.*\\1")


```
